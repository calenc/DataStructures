///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
// Project:             Project 4 - Supermarket Simulation
// File Name:           Event.cs
// Description:         Defines enter and exit events for Customers in a supermarket going through the checkout line.
// Course:              CSCI 2210-002 - Data Structures
// Author:              Calen Cummings, cummingscc@etsu.edu
// Created:             Monday, November 22, 2021
// Copyright:           Calen Cummings, 2021
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Project4SupermarketSim
{
    /// <summary>
    /// Enumerator to define the different types of events we will be using/generating.
    /// </summary>
    enum EVENTTYPE { ENTER, LEAVE };

    /// <summary>
    /// Defining class to create Events for customers leaving and entering a checkout line, to be used in a simulation.
    /// </summary>
    class Event : IComparable
    {
        /// <summary>
        /// Property to access the type of the events generated by the program.
        /// </summary>
        public EVENTTYPE Type { get; set; }

        /// <summary>
        /// Property to access the time so we can give enter and exit times for events/people.
        /// </summary>
        public DateTime Time { get; set; }

        /// <summary>
        /// Property to access the Customer associated with the event so we can correctly track events.
        /// </summary>
        public Customer Person { get; set; }

        /// <summary>
        /// Default constructor for an event that is initialized with default values.
        /// </summary>
        public Event()
        {
            Type = EVENTTYPE.ENTER;
            Time = new DateTime();
        }

        /// <summary>
        /// Parameterized constructor so we can create Event objects from specific values.
        /// </summary>
        /// <param name="type"></param>
        /// <param name="time"></param>
        /// <param name="person"></param>
        public Event(EVENTTYPE type, DateTime time, Customer person)
        {
            Type = type;
            Time = time;
            Person = person;
        }

        /// <summary>
        /// ToString method to display the enter and leave events as a string. Modified from Lecture 13.
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            string str = "";

            str += String.Format("Customer {0} ", Person.CustNumber.ToString().PadLeft(3));
            str += Type + "s";
            str += String.Format(" the line at {0}", Time.ToShortTimeString().PadLeft(8));

            return str;
        }

        /// <summary>
        /// CompareTo method that allows us to compare Event objects.
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public int CompareTo(Object obj)
        {
            if (!(obj is Event))
                throw new ArgumentException("The argument is not an Event object.");

            Event e = (Event)obj;
            return (e.Time.CompareTo(Time));
        }
    }
}
